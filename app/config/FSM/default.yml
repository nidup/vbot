states:
    start:
        type: initial
    goto-mine:
        type: normal
    goto-enemy:
        type: normal
    goto-tavern:
        type: normal
    hold-position:
        type: normal
    dead:
        type: final
transitions:
    waiting:
        from:
            - start
        to: goto-mine
        condition: 'true'
        action:    'hero.setTarget(game.getClosestNotOwnedMine(hero))'
    # defensive position in priority
    capture-a-last-mine-then-hold-position:
        from:
             - goto-mine
        to: hold-position
        condition: 'hero.getTarget().isOwnedBy(hero) && game.getRanking().getVictoryRatio(hero) >= 80'
        action:    'hero.resetTarget()'
    capture-mine-then-goto-other-mine:
        from:
             - goto-mine
        to: goto-mine
        condition: 'hero.getTarget().isOwnedBy(hero) && game.ownsAllMines(hero) === false'
        action:    'hero.setTarget(game.getClosestNotOwnedMine(hero))'
#    attack:
#        from:
#            - goto-mine
#        to: goto-enemy
#        condition: 'hero.getMineCount() > 2'
#        action:    'hero.setTarget(game.getEnemyWithMoreMines())'
    hurted-two-attacks:
        from:
            - goto-mine
            - goto-enemy
        to: goto-tavern
        condition: 'hero.getLife() < 41 && hero.getGold() >= 2'
        action:    'hero.setTarget(game.getClosestTavern(hero))'
    hurted-defensive:
        from:
            - hold-position
        to: goto-tavern
        condition: 'hero.getLife() < 81 && hero.getGold() >= 2'
        action:    'hero.setTarget(game.getClosestTavern(hero))'
    # defensive position in priority
    healed-then-hold-position:
        from:
            - goto-tavern
        to: hold-position
        condition: 'hero.getLife() == 99 && game.getRanking().getVictoryRatio(hero) >= 80 && hero.getMineCount() >= 1'
        action:    'hero.resetTarget()'
    healed-then-goto-mine:
        from:
            - goto-tavern
        to: goto-mine
        condition: 'hero.getLife() == 99 && game.ownsAllMines(hero) === false'
        action:    'hero.setTarget(game.getClosestNotOwnedMine(hero))'
    # TODO : healed, one beer if no risk around
